---
import Layout from '~/layouts/PageLayout.astro';
import HeroText from '~/components/widgets/HeroText.astro';
import ContactUs from '~/components/widgets/Contact.astro';

const metadata = {
  title: 'Solicitud de presupuesto para Calendarios',
};

const title = 'Solicita tu presupuesto para Calendarios 2024';
const subtitle = 'Rellena el formulario para obtener un presupuesto personalizado para tus calendarios.';
---

<Layout metadata={metadata}>
  <HeroText title={title} subtitle={subtitle} />

  <ContactUs
    id="form-contact"
    title={title}
    subtitle={subtitle}
    inputs={[
      {
        type: 'text',
        name: 'nombre',
        label: 'Name',
      },
      {
        type: 'email',
        name: 'email',
        label: 'Email',
      },
      {
        type: 'tel',
        name: 'telefono',
        label: 'Phone',
      },
      {
        type: 'select',
        name: 'tipo',
        label: 'Calendar Type',
        options: [
          { value: 'mesa-espiral', label: 'Mesa con Espiral' },
          { value: 'pared-revista', label: 'Pared Tipo Revista' },
          { value: 'triangular-mesa', label: 'Triangular de Mesa' },
        ],
      },
      {
        type: 'select',
        name: 'cantidad',
        label: 'Quantity',
        options: [
          { value: '100', label: '100' },
          { value: '200', label: '200' },
          { value: '500', label: '500' },
          { value: '750', label: '750' },
          { value: '1000', label: '1000' },
        ],
      },
    ]}
    textarea={{
      label: 'Message',
    }}
    disclaimer={{
      label:
        'By submitting this contact form, you acknowledge and agree to the collection of your personal information.',
    }}
    description="Our support team typically responds within 24 business hours."
    
  />
  <div id="feedback" class="hidden p-4 text-white rounded-md"></div>
  
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('form-contact');  // Usar el ID correcto
    const feedback = document.getElementById('feedback');

    if (form && feedback) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();  // Evita recargar la página

        const formData = new FormData(e.target);  // Obtener los datos del formulario
        const data = Object.fromEntries(formData.entries());  // Convertir a objeto

        try {
          const response = await fetch('/api/send-email', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
          });

          if (response.ok) {
            feedback.textContent = 'Correo enviado correctamente';
            feedback.classList.remove('hidden');
            feedback.classList.remove('bg-red-500');
            feedback.classList.add('bg-green-500');
            e.target.reset();  // Limpiar el formulario
          } else {
            feedback.textContent = 'Error al enviar el correo';
            feedback.classList.remove('hidden');
            feedback.classList.remove('bg-green-500');
            feedback.classList.add('bg-red-500');
          }
        } catch (error) {
          console.error('Error al enviar el formulario:', error);
          feedback.textContent = 'Error en el envío del formulario';
          feedback.classList.remove('hidden');
          feedback.classList.remove('bg-green-500');
          feedback.classList.add('bg-red-500');
        }
      });
    } else {
      console.error('Formulario o feedback no encontrado');
    }
  });
</script>
