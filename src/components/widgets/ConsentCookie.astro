---
import 'vanilla-cookieconsent/dist/cookieconsent.css';
import { config } from '../../libs/CookieConsentConfig';
import { run } from 'vanilla-cookieconsent';
---

<div transition:persist id="cc-container" client:only>
    <button type="button" data-cc="show-preferencesModal">Show preferences modal</button>

    <script>
       // Definición de la función updateGTMConsent para gestionar el consentimiento
       function updateGTMConsent(category, consent) {
         // Verifica que `window` esté disponible
         if (typeof window !== 'undefined') {
           const checkGtagLoaded = setInterval(() => {
             if (typeof window.gtag === 'function') {
               window.gtag('consent', 'update', {
                 [category]: consent ? 'granted' : 'denied',
               });
               clearInterval(checkGtagLoaded); // Detener el intervalo cuando gtag está disponible
             }
           }, 100); // Verificar cada 100 ms
         }
       }

       // Modificar la configuración de consentimiento para que use updateGTMConsent
       const updatedConfig = {
         ...config,
         categories: {
           ...config.categories,
           analytics: {
             ...config.categories.analytics,
             services: {
               ga4: {
                 label: '<a href="https://marketingplatform.google.com/about/analytics/terms/us/" target="_blank">Google Analytics 4</a>',
                 onAccept: () => updateGTMConsent('analytics_storage', true),
                 onReject: () => updateGTMConsent('analytics_storage', false),
                 cookies: [
                   {
                     name: /^_ga/, // Expresión regular para varias cookies de GA
                   },
                   {
                     name: '_gid', // Nombre exacto de la cookie
                   },
                 ],
               },
             },
           },
           marketing: {
             ...config.categories.marketing,
             services: {
               ads: {
                 label: 'Publicidad personalizada',
                 onAccept: () => updateGTMConsent('ad_storage', true),
                 onReject: () => updateGTMConsent('ad_storage', false),
               },
             },
           },
         },
       };

       // Ejecutar el plugin con la configuración actualizada
       if (typeof window !== 'undefined') {
         run(updatedConfig);

         // Manejador de eventos para mantener las clases en la etiqueta <html>
         document.addEventListener('astro:before-preparation', () => {
           window._htmlClassName = document.documentElement.className;
         });

         document.addEventListener('astro:before-swap', (event) => {
           event.newDocument.documentElement.className = window._htmlClassName;
         });
       }
    </script>
</div>
