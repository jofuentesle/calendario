<script>
  window.addEventListener('load', function () {
    const tipoSelect = document.querySelector('select[name="tipo"]') as HTMLSelectElement;
    const medidaSelect = document.querySelector('select[name="medida"]') as HTMLSelectElement;

    //const params = new URLSearchParams(window.location.search);
    //const tipo = params.get('tipo'); // Esto te dará 'pared-revista'

    //console.log(tipo);
    // Verificamos si tipoSelect y medidaSelect existen y son HTMLSelectElement
    if (tipoSelect && medidaSelect && tipoSelect instanceof HTMLSelectElement && medidaSelect instanceof HTMLSelectElement) {
      console.log(tipoSelect);  // Verifica que está seleccionando el elemento correcto
      console.log(medidaSelect);

      // Definir las medidas de acuerdo con el tipo seleccionado
      const medidas = {
        'mesa-espiral': ['15x15 cm', '21x10 cm', 'Din A5'],
        'mesa-triangular': ['15x15 cm', '21x10 cm', 'Din A5'],
        'pared-espiral': ['38x48 cm'],
        'pared-revista': ['34 x 24 cm (cerrado)'],
      };

      // Función para actualizar las opciones de medidas
      function actualizarMedidas() {
        const tipo = tipoSelect.value;  // Ahora estamos seguros de que tipoSelect es un HTMLSelectElement
        const medidasDelTipo = medidas[tipo] || [];
        
        // Limpiar las opciones actuales
        if(medidaSelect){
          medidaSelect.innerHTML = '';
        }
        // Añadir las nuevas opciones
        medidasDelTipo.forEach(medida => {
          const option = document.createElement('option');
          option.value = medida;
          option.textContent = medida;
          medidaSelect?.appendChild(option);
        });
      }

      // Actualizar cuando se cambie el tipo de calendario
      tipoSelect.addEventListener('change', actualizarMedidas);

      // Cargar las medidas del tipo seleccionado inicialmente
      actualizarMedidas();
    } else {
      console.error('No se encontró el select de tipo o medida, o no son HTMLSelectElement.');
    }
  });
</script>
